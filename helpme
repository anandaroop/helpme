#! /usr/bin/env ruby

require 'dotenv'
require 'ruby_llm'
require 'rainbow'

# find .env regardless of where this file is symlinked or run from

actual_path_to_this_file = (File.realpath(__FILE__))
this_dir = File.dirname(actual_path_to_this_file)
env_path = File.join(this_dir, '.env')
Dotenv.load(env_path)

# configure API keys

RubyLLM.configure do |config|
  config.anthropic_api_key = ENV['ANTHROPIC_API_KEY']
  config.openai_api_key = ENV['OPENAI_API_KEY']
  config.gemini_api_key = ENV['GEMINI_API_KEY']
end

# set up the chat completion

models = [
  "claude-3-7-sonnet-20250219",
  "gpt-4o-mini",
  "gemini-2.0-flash"
]

padding = models.map(&:length).max

chats = models.map do |model|
  RubyLLM.chat(model: model).with_temperature(0.1)
end

explainer_chat = RubyLLM.chat(model: models[0]).with_temperature(0.1)

system_prompt = <<~SYSTEM
  You are an expert user of the following command line Unix utilities:
  - ffmpeg
  - imagemagick

  Your task is to take the user's request and produce the exact
  command line invocation that will accomplish the user's goal,
  including all necessary flags and arguments.

  Prefer ImageMagick over ffmpeg for image processing tasks.

  If you need more information from the user, state what's missing.

  Otherwise, no yapping, no markdown, no fluff. Just the command.
SYSTEM

chats.each do |chat|
  chat.add_message role: :system, content: system_prompt
end

# get the LLM response

user_request = ARGV.join(" ")

commands = []
chats.each_with_index do |chat, i|
  response = chat.ask user_request
  commands[i] = response.content
  spaces = " " * (padding - chat.model.id.length)
  puts "%s%s [%s] %s" % [spaces, Rainbow(chat.model.id).darkgray, Rainbow(i).bold.blue, Rainbow(commands[i]).green]
end

# get user response

print "Choose command number (or Enter to quit): "
user_response = STDIN.gets

# maybe explain the command

if user_response =~ /^e(\d+)/i
  selected_index = $1.to_i
  puts Rainbow("Getting explanationâ€¦").darkgray
  response = explainer_chat.ask "Succinctly explain the command: #{commands[selected_index]}"
  puts Rainbow(response.content).blue
  exit
end

# maybe run the command

if user_response =~ /^(\d+)/i
  selected_index = $1.to_i
  selected_command = commands[selected_index]
  puts Rainbow("Running [#{selected_index}] #{selected_command}").darkgray
  system selected_command
end
